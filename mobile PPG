<uses-permission android:name="android.permission.BLUETOOTH"/>
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
<uses-permission android:name="android.permission.BLUETOOTH_SCAN"/>
<uses-permission android:name="android.permission.BLUETOOTH_CONNECT"/>
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-feature android:name="android.hardware.bluetooth_le" android:required="true"/>

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothGatt;
import android.bluetooth.BluetoothGattCallback;
import android.bluetooth.BluetoothGattCharacteristic;
import android.bluetooth.BluetoothManager;
import android.os.Bundle;
import android.util.Log;
import androidx.appcompat.app.AppCompatActivity;
import java.util.UUID;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "PPG_Sensor";
    private BluetoothAdapter bluetoothAdapter;
    private BluetoothGatt bluetoothGatt;
    private BluetoothDevice bluetoothDevice;

    // UUIDs for the PPG sensor
    private static final String SENSOR_MAC_ADDRESS = "XX:XX:XX:XX:XX:XX"; // Replace with your sensor MAC address
    private static final UUID PPG_CHARACTERISTIC_UUID = UUID.fromString("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"); // Replace with the sensor's UUID

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        BluetoothManager bluetoothManager = (BluetoothManager) getSystemService(BLUETOOTH_SERVICE);
        bluetoothAdapter = bluetoothManager.getAdapter();

        if (bluetoothAdapter == null || !bluetoothAdapter.isEnabled()) {
            Log.e(TAG, "Bluetooth not supported or not enabled.");
            return;
        }

        // Get the Bluetooth device by MAC address
        bluetoothDevice = bluetoothAdapter.getRemoteDevice(SENSOR_MAC_ADDRESS);
        connectToDevice();
    }

    private void connectToDevice() {
        bluetoothGatt = bluetoothDevice.connectGatt(this, false, gattCallback);
    }

    private final BluetoothGattCallback gattCallback = new BluetoothGattCallback() {

        @Override
        public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {
            super.onConnectionStateChange(gatt, status, newState);
            if (newState == BluetoothGatt.STATE_CONNECTED) {
                Log.d(TAG, "Connected to the PPG sensor.");
                // Discover services on the connected device
                bluetoothGatt.discoverServices();
            } else if (newState == BluetoothGatt.STATE_DISCONNECTED) {
                Log.d(TAG, "Disconnected from the PPG sensor.");
            }
        }

        @Override
        public void onServicesDiscovered(BluetoothGatt gatt, int status) {
            super.onServicesDiscovered(gatt, status);
            if (status == BluetoothGatt.GATT_SUCCESS) {
                BluetoothGattCharacteristic ppgCharacteristic = getPPGCharacteristic(gatt);
                if (ppgCharacteristic != null) {
                    // Enable notifications to get real-time data from the sensor
                    bluetoothGatt.setCharacteristicNotification(ppgCharacteristic, true);
                }
            }
        }

        @Override
        public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {
            super.onCharacteristicChanged(gatt, characteristic);
            if (PPG_CHARACTERISTIC_UUID.equals(characteristic.getUuid())) {
                byte[] ppgData = characteristic.getValue();
                processPPGData(ppgData);
            }
        }
    };

    private BluetoothGattCharacteristic getPPGCharacteristic(BluetoothGatt gatt) {
        // Retrieve the PPG characteristic from the services
        for (BluetoothGattService service : gatt.getServices()) {
            for (BluetoothGattCharacteristic characteristic : service.getCharacteristics()) {
                if (PPG_CHARACTERISTIC_UUID.equals(characteristic.getUuid())) {
                    return characteristic;
                }
            }
        }
        return null;
    }

    private void processPPGData(byte[] data) {
        // Process the raw PPG data (e.g., convert to heart rate, oxygen saturation, etc.)
        Log.d(TAG, "PPG Data: " + bytesToHex(data));
    }

    private String bytesToHex(byte[] data) {
        StringBuilder sb = new StringBuilder();
        for (byte b : data) {
            sb.append(String.format("%02X", b));
        }
        return sb.toString();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (bluetoothGatt != null) {
            bluetoothGatt.close();
        }
    }
}

